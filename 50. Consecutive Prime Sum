import math

def isPrime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

primes = []
for i in range(2, 3950):
    if isPrime(i):
        primes.append(i)

max_prime = 0
num_primes = len(primes)
prime_sums = []
for i in range(num_primes):
    prime_sum = 0
    for j in range(i, num_primes):
        prime_sum += primes[j]
        if isPrime(prime_sum):
            prime_sums.append(prime_sum)
        if prime_sum >= 1000000:
            break
result = []
for part in prime_sums :
    if part < 1000000:
        result.append(part)
print(sorted((result)))
'''----------------------------------------------------------'''
#Alternative solution from the internet 
'''
def mulmod(a, b, modulo):
    # Fast path when no overflow will occur
    if a <= 0xFFFFFFF and b <= 0xFFFFFFF:
        return (a * b) % modulo

    # Slow path with overflow handling
    result = 0
    factor = a % modulo
    while b > 0:
        if b & 1:
            result += factor
            if result >= modulo:
                result %= modulo
        factor <<= 1
        if factor >= modulo:
            factor %= modulo
        b >>= 1
    return result


def powmod(base, exponent, modulo):
    result = 1
    while exponent > 0:
        if exponent & 1:
            result = mulmod(result, base, modulo)
        base = mulmod(base, base, modulo)
        exponent >>= 1
    return result


def is_prime(p):
    if p < 2:
        return False
    if p in {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}:
        return True
    if any(p % d == 0 for d in (2, 3, 5, 7, 11, 13, 17)):
        return False
    if p < 17 * 19:
        return True

    test_against = [2, 325, 9375, 28178, 450775, 9780504, 1795265022]
    d = p - 1
    shift = 0
    while d % 2 == 0:
        d >>= 1
        shift += 1

    for a in test_against:
        x = powmod(a, d, p)
        if x in (1, p - 1):
            continue
        for _ in range(shift - 1):
            x = powmod(x, 2, p)
            if x == p - 1:
                break
            if x == 1:
                return False
        else:
            return False
    return True


def generate_primes_and_sums(limit):
    primes = []
    prime_sum = [0]

    def next_prime(n):
        while True:
            n += 2
            if all(n % p != 0 for p in primes if p * p <= n):
                return n

    n = 2
    while prime_sum[-1] < limit:
        primes.append(n)
        prime_sum.append(prime_sum[-1] + n)
        n = 3 if n == 2 else next_prime(n)

    return primes, prime_sum


def find_longest_prime_sum(limit):
    primes, prime_sum = generate_primes_and_sums(limit)

    best_prime_sum = 0
    max_length = 0

    for start in range(len(primes)):
        for end in range(start + max_length, len(primes)):
            sum_primes = prime_sum[end] - prime_sum[start]
            if sum_primes >= limit:
                break
            if end - start > max_length and is_prime(sum_primes):
                max_length = end - start
                best_prime_sum = sum_primes

    return best_prime_sum, max_length


# Example usage
limit = 1000000
best_sum, length = find_longest_prime_sum(limit)
print(f"The longest sum of consecutive primes below {limit} that is prime is {best_sum}, with a sequence length of {length}.")

'''
