def SieveOfAtkin(limit):
    if limit < 2:
        return []

    primes = []
    if limit > 2:
        primes.append(2)
    if limit > 3:
        primes.append(3)

    sieve = [False] * (limit + 1)

    x = 1
    while x * x <= limit:
        y = 1
        while y * y <= limit:
            n = (4 * x * x) + (y * y)
            if n <= limit and (n % 12 == 1 or n % 12 == 5):
                sieve[n] ^= True

            n = (3 * x * x) + (y * y)
            if n <= limit and n % 12 == 7:
                sieve[n] ^= True

            n = (3 * x * x) - (y * y)
            if x > y and n <= limit and n % 12 == 11:
                sieve[n] ^= True

            y += 1
        x += 1

    r = 5
    while r * r <= limit:
        if sieve[r]:
            for i in range(r * r, limit + 1, r * r):
                sieve[i] = False
        r += 1

    for a in range(5, limit + 1):
        if sieve[a]:
            primes.append(a)

    return primes
#Sieve of Atkin code is from GeeksForGeeks

primes = sorted(SieveOfAtkin(10000))
odd_composites = [i for i in range(3, 10001, 2) if i not in primes]
l1 = []
result = []

for i in odd_composites:
    found = False
    for p in primes:
        if p > i:
            break
        k = 1
        while p + 2 * k * k <= i:
            if p + 2 * k * k == i:
                found = True
                l1.append(i)
                break
            k += 1
        if found:
            break

for k in odd_composites:
    if k not in l1:
        result.append(k)

print(result[0])
