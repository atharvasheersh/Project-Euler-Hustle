def get_decimal_expansion(d, digits=5000):
    rem = 1
    result = []
    for i in range(digits):
        rem *= 10
        result.append(str(rem // d))
        rem %= d
    return "".join(result)

def find_recurrence(s):
    n = len(s)
    for j in range(1, n // 2 + 1):
        pattern = s[:j]
        valid = True
        for i in range(0, n, j):
            chunk = s[i:i+j]
            if chunk != pattern[:len(chunk)]:
                valid = False
                break
        if valid:
            return pattern
    return s

max_len = 0
result = 0

for d in range(2, 1000):
    if d % 2 == 0 or d % 5 == 0:
        continue
    decimal = get_decimal_expansion(d, 5000)
    pattern = find_recurrence(decimal)
    if len(pattern) > max_len:
        max_len = len(pattern)
        result = d

print(result)
